// Code generated by protoc-gen-go.
// source: twirper.proto
// DO NOT EDIT!

/*
Package twirper is a generated protocol buffer package.

It is generated from these files:
	twirper.proto

It has these top-level messages:
	EchoReq
	RepeatReq
	RepeatResp
*/
package twirper

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request type for the Echo RPC (also the response, because echo)
type EchoReq struct {
	// Message will be echoed back in the EchoResp
	Message string `protobuf:"bytes,1,opt,name=Message" json:"Message,omitempty"`
}

func (m *EchoReq) Reset()                    { *m = EchoReq{} }
func (m *EchoReq) String() string            { return proto.CompactTextString(m) }
func (*EchoReq) ProtoMessage()               {}
func (*EchoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EchoReq) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RepeatReq struct {
	// Message to be repeated
	Message string `protobuf:"bytes,1,opt,name=Message" json:"Message,omitempty"`
	// The number of times to repeat the message
	NumRepeats int32 `protobuf:"varint,2,opt,name=NumRepeats" json:"NumRepeats,omitempty"`
	// Milliseconds to wait between repeats
	DelayMs int64 `protobuf:"varint,3,opt,name=DelayMs" json:"DelayMs,omitempty"`
	// Send an error after this many messages (no errors if ErrAfter<=0)
	ErrAfter int32 `protobuf:"varint,4,opt,name=ErrAfter" json:"ErrAfter,omitempty"`
}

func (m *RepeatReq) Reset()                    { *m = RepeatReq{} }
func (m *RepeatReq) String() string            { return proto.CompactTextString(m) }
func (*RepeatReq) ProtoMessage()               {}
func (*RepeatReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RepeatReq) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RepeatReq) GetNumRepeats() int32 {
	if m != nil {
		return m.NumRepeats
	}
	return 0
}

func (m *RepeatReq) GetDelayMs() int64 {
	if m != nil {
		return m.DelayMs
	}
	return 0
}

func (m *RepeatReq) GetErrAfter() int32 {
	if m != nil {
		return m.ErrAfter
	}
	return 0
}

type RepeatResp struct {
	// Repeated is how many times the message has already been repeated
	// (i.e. on first resp Repeated is 0, last of n is n - 1)
	ID int32 `protobuf:"varint,3,opt,name=ID" json:"ID,omitempty"`
	// The same message as from the request
	Message string `protobuf:"bytes,1,opt,name=Message" json:"Message,omitempty"`
	// DelayedMs is how many milliseconds the delay actually took
	DelayedMs int64 `protobuf:"varint,2,opt,name=DelayedMs" json:"DelayedMs,omitempty"`
}

func (m *RepeatResp) Reset()                    { *m = RepeatResp{} }
func (m *RepeatResp) String() string            { return proto.CompactTextString(m) }
func (*RepeatResp) ProtoMessage()               {}
func (*RepeatResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RepeatResp) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *RepeatResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RepeatResp) GetDelayedMs() int64 {
	if m != nil {
		return m.DelayedMs
	}
	return 0
}

func init() {
	proto.RegisterType((*EchoReq)(nil), "twirper.EchoReq")
	proto.RegisterType((*RepeatReq)(nil), "twirper.RepeatReq")
	proto.RegisterType((*RepeatResp)(nil), "twirper.RepeatResp")
}

func init() { proto.RegisterFile("twirper.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x29, 0xcf, 0x2c,
	0x2a, 0x48, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x94, 0xb9,
	0xd8, 0x5d, 0x93, 0x33, 0xf2, 0x83, 0x52, 0x0b, 0x85, 0x24, 0xb8, 0xd8, 0x7d, 0x53, 0x8b, 0x8b,
	0x13, 0xd3, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0xa5, 0x6a, 0x2e, 0xce,
	0xa0, 0xd4, 0x82, 0xd4, 0xc4, 0x12, 0xbc, 0xca, 0x84, 0xe4, 0xb8, 0xb8, 0xfc, 0x4a, 0x73, 0x21,
	0x2a, 0x8b, 0x25, 0x98, 0x14, 0x18, 0x35, 0x58, 0x83, 0x90, 0x44, 0x40, 0x3a, 0x5d, 0x52, 0x73,
	0x12, 0x2b, 0x7d, 0x8b, 0x25, 0x98, 0x15, 0x18, 0x35, 0x98, 0x83, 0x60, 0x5c, 0x21, 0x29, 0x2e,
	0x0e, 0xd7, 0xa2, 0x22, 0xc7, 0xb4, 0x92, 0xd4, 0x22, 0x09, 0x16, 0xb0, 0x3e, 0x38, 0x5f, 0x29,
	0x84, 0x8b, 0x0b, 0x66, 0x79, 0x71, 0x81, 0x10, 0x1f, 0x17, 0x93, 0xa7, 0x0b, 0x58, 0x3b, 0x6b,
	0x10, 0x93, 0xa7, 0x0b, 0x1e, 0xd7, 0xc8, 0x70, 0x71, 0x82, 0x8d, 0x4f, 0x4d, 0xf1, 0x85, 0x38,
	0x86, 0x39, 0x08, 0x21, 0x60, 0x94, 0xc5, 0xc5, 0x1e, 0x02, 0x09, 0x02, 0x21, 0x2d, 0x2e, 0x16,
	0x50, 0x10, 0x08, 0x09, 0xe8, 0xc1, 0xc2, 0x08, 0x1a, 0x22, 0x52, 0x18, 0x22, 0x42, 0xc6, 0x5c,
	0x6c, 0x10, 0xc7, 0x08, 0x09, 0xc1, 0xe5, 0xe0, 0x41, 0x23, 0x25, 0x8c, 0x21, 0x56, 0x5c, 0x60,
	0xc0, 0xe8, 0xc4, 0x19, 0x05, 0x0b, 0xee, 0x24, 0x36, 0x70, 0xf0, 0x1b, 0x03, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xe3, 0x59, 0xed, 0x7f, 0x8f, 0x01, 0x00, 0x00,
}
